// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model ApiKey {
  key     String   @id @unique @default(cuid())
  userId  String?  @unique
  teamId  String?  @unique
  expires DateTime

  associatedTeam Team? @relation(fields: [teamId], references: [id], onDelete: Cascade)
  associatedUser User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  keyTier KeyTier
  keyType KeyType @default(value: USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId], name: "UserId")
  @@index([teamId], name: "TeamId")
}

model User {
  id                   String  @id @default(cuid())
  email                String? @unique
  username             String  @unique
  passwordHash         String?
  githubId             Int?    @unique
  githubInstallationId String? @unique
  memberTeamId         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ApiKey            ApiKey?
  Repository        Repository?
  IssuedInviteCodes InviteCode[] @relation("Issued")
  UsedInviteCode    InviteCode[] @relation("Used")
  MemberTeam        Team?        @relation("TeamMembers", fields: [memberTeamId], references: [id])

  @@index([memberTeamId], name: "TeamId")
}

model Team {
  id      String @id @unique @default(cuid())
  name    String
  ownerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Members User[] @relation("TeamMembers")

  ApiKey      ApiKey?
  Repository  Repository?
  InviteCodes TeamInviteCode[]

  @@index([ownerId], name: "OwnerId")
}

model Repository {
  id                    String    @id @unique @default(cuid())
  repoName              String
  repoId                String
  branchName            String?
  userId                String?   @unique
  teamId                String?   @unique
  associatedUser        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  associatedTeam        Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  filename              String?
  contractAddress       String?
  contractAbi           String?   @db.Text
  cachedConstructorArgs String?   @db.Text
  foundryRootDir        String?
  deployerAddress       String?
  lastDeployed          DateTime?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  Activity  Transaction[]

  @@index([repoId], name: "RepoId")
  @@index([userId], name: "UserId")
  @@index([teamId], name: "TeamId")
}

model Transaction {
  txHash               String      @id @unique
  repositoryId         String
  associatedRepository Repository? @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  functionName         String
  callerUsername       String?

  timestamp DateTime @default(now())

  @@index([repositoryId], name: "RepositoryId")
}

enum KeyTier {
  FREE
  PERSONAL
  PRO
}

enum KeyType {
  USER
  TEAM
}

model InviteCode {
  inviteCode String    @id @unique @default(cuid())
  keyStatus  KeyStatus @default(UNUSED)

  issuedToId String?
  usedById   String?
  issuedTo   User?   @relation("Issued", fields: [issuedToId], references: [id], onDelete: Cascade)
  usedBy     User?   @relation("Used", fields: [usedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([issuedToId], name: "IssuedToId")
  @@index([usedById], name: "UsedById")
}

model TeamInviteCode {
  inviteCode String    @id @unique @default(cuid())
  keyStatus  KeyStatus @default(UNUSED)

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([teamId], name: "TeamId")
}

enum KeyStatus {
  UNUSED
  USED
}
