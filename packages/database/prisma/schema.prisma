// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String  @id @default(cuid())
  email                String? @unique
  username             String  @unique
  passwordHash         String?
  githubId             Int?    @unique
  githubInstallationId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ApiKey            ApiKey?
  Repository        Repository?
  IssuedInviteCodes InviteCode[] @relation("Issued")
  UsedInviteCode    InviteCode[] @relation("Used")
}

model ApiKey {
  key            String   @id @unique @default(cuid())
  userId         String   @unique
  associatedUser User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  keyTier        KeyTier
  expires        DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId], name: "UserId")
}

model Repository {
  id              String    @id @unique @default(cuid())
  name            String
  userId          String    @unique
  associatedUser  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  filename        String?
  contractAddress String?
  contractAbi     String?   @db.Text
  foundryRootDir  String?
  deployerAddress String?
  lastDeployed    DateTime?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  Activity  Transaction[]

  @@index([userId], name: "UserId")
}

model Transaction {
  txHash               String     @id @unique
  repositoryId         String
  associatedRepository Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  functionName         String

  timestamp DateTime @default(now())

  @@index([repositoryId], name: "RepositoryId")
}

enum KeyTier {
  FREE
  PERSONAL
  PRO
}

model InviteCode {
  inviteCode String    @id @unique @default(cuid())
  keyStatus  KeyStatus @default(UNUSED)

  issuedToId String?
  usedById   String?
  issuedTo   User?   @relation("Issued", fields: [issuedToId], references: [id], onDelete: Cascade)
  usedBy     User?   @relation("Used", fields: [usedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([issuedToId], name: "IssuedToId")
  @@index([usedById], name: "UsedById")
}

enum KeyStatus {
  UNUSED
  USED
}
